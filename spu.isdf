# SPU Instruction Set Descriptor File
# by geohot
# part of "The Embedded Disassembler"
 
# Registers is a reserved keyword
# Makes Registers_0 Registers_1 Registers_2... in global scope
# Haha, that would've been nice if true
# I don't think % is a reserved keyword
Registers 128 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9
Registers 128 %10 %11 %12 %13 %14 %15 %16 %17 %18 %19
Registers 128 %20 %21 %22 %23 %24 %25 %26 %27 %28 %29
Registers 128 %30 %31 %32 %33 %34 %35 %36 %37 %38 %39
Registers 128 %40 %41 %42 %43 %44 %45 %46 %47 %48 %49
Registers 128 %50 %51 %52 %53 %54 %55 %56 %57 %58 %59
Registers 128 %60 %61 %62 %63 %64 %65 %66 %67 %68 %69
Registers 128 %70 %71 %72 %73 %74 %75 %76 %77 %78 %79
Registers 128 %80 %81 %82 %83 %84 %85 %86 %87 %88 %89
Registers 128 %90 %91 %92 %93 %94 %95 %96 %97 %98 %99
Registers 128 %100 %101 %102 %103 %104 %105 %106 %107 %108 %109
Registers 128 %110 %111 %112 %113 %114 %115 %116 %117 %118 %119
Registers 128 %120 %121 %122 %123 %124 %125 %126 %127
Registers 32 PC
 
# Special Strings
ProgramCounter `PC`
LinkRegister `%R0`
StackPointer `%R1`
ProgramCounterOffset 0
 
# Instruction Comprehesions start here
# An instruction runs through all matching until it hits Stop
# * is don't care
# spaces are ignored
# any lowercase letter is a local variable
# DefaultChange, Registers are special global words
# Stop, Change, Parsed are special local words
# Everything else is a string, with all whitespace stripped
# Curly braces mean insert variable, undeclared vars are empty
 
# Parsed
# Parsed can be recursive, use percent to insert
# |...| is eval string to hex
 
# Noob notes
# |...| is eval string to hex
# {...} is get variable
# {{...}} is get register indexed by variable
# [...] is dereference
# `...` is "address of"
 
# So to clarify, [`{{n}}`] is the derefenced address of the register indexed by the 

variable "n". Got that?
# Though I don't understand {|{ri}|} for immeds, why the second get variable
 
# DefaultChanges apply to the inverse condition of anything targeting the target
# If that makes sense at all
 
# I don't think signed(as in like + and -) is handled yet
 
# This will not be a simulator for now

# Update by Disane some of the Integer and Logical Instructions were wrong so i had 

to correct them
# missing t -s and the Add Word bit mask was wrong
# also added all Integer and Logical Instructions
# i could not confirm if the (d-form) and (a-form) instructions in Memory-Load/Store 

Instructions are valid
# Compare Branch and Halt Instructions in the IBM documentation are a little bit 

weird so i decided to update my ISDF documentation

####DefaultChanges####
 
DefaultChange 32 `PC` [`PC`]+4
 
####Memory-Load/Store Instructions####
 
# Load Quadword (d-form)
00110100 iiiiiiiiii aaaaaaa ttttttt
  ri {i} << 4
  Parsed "O R, I(R)" lqd {{t}} {|{ri}|} {{a}}
  #Change 128 `{{t}}` [[`{{a}}`] + {ri}]
  Stop
 
# Load Quadword (x-form)
00111000100 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" lqx {{t}} {{a}} {{b}}
  #Change 128 `{{t}}` [[`{{a}}`] + [`{{b}}`]]
  Stop
 
# Load Quadword (a-form)
001100001 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" lqa {{t}} {|{i}|}
  #Change 128 `{{t}}` {i}
  Stop
 
# Load Quadword Instruction Relative (a-form)
001100111 iiiiiiiiiiiiiiii ttttttt
  Source [[`PC`] + ({i} << 2)]
  Parsed "O R, I" lqr {{t}} {|Source|}
  #Change 128 `{{t}}` {Source}
  Stop
 
# Store Quadword (d-form)
00100100 iiiiiiiiii aaaaaaa ttttttt
  ri {i} << 4
  Parsed "O R, I(R)" stqd {{t}} {|{ri}|} {{a}}
  #Change 128 [`{{a}}`]+{ri} [`{{t}}`]
  Stop
 
# Store Quadword (x-form)
00101000100 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" stqx {{t}} {{a}} {{b}}
  #Change 128 [`{{a}}`] + [`{{b}}`] [`{{t}}`]
  Stop
 
# Store Quadword (a-form)
001000001 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" stqa {{t}} {|{i}|}
  #Change 128 {i} [`{{t}}`]
  Stop
 
# Store Quadword Instruction Relative (a-form)
001000111 iiiiiiiiiiiiiiii ttttttt
  Source [[`PC`] + ({i} << 2)]
  Parsed "O R, I" stqr {{t}} {|Source|}
  #Change 128 {Source} [`{{t}}`]
  Stop
 
# Generate Controls for Byte Insertion (d-form)
00111110100 iiiiiii aaaaaaa ttttttt
  Parsed "O R, I(R)" cbd {{t}} {i} {{a}}
  Stop
 
# Generate Controls for Byte Insertion (x-form)
00111010100 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" cbx {{t}} {{a}} {{b}}
  Stop
 
# Generate Controls for Halfword Insertion (d-form)
00111110101 iiiiiii aaaaaaa ttttttt
  Parsed "O R, I(R)" chd {{t}} {i} {{a}}
  Stop
 
# Generate Controls for Halfword Insertion (x-form)
00111010101 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" chx {{t}} {{a}} {{b}}
  Stop
 
# Generate Controls for Word Insertion (d-form)
00111110110 iiiiiii aaaaaaa ttttttt
  Parsed "O R, I(R)" cwd {{t}} {i} {{a}}
  Stop
 
# Generate Controls for Word Insertion (x-form)
00111010110 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" cwx {{t}} {{a}} {{b}}
  Stop
 
# Generate Controls for Doubleword Insertion (d-form)
00111110111 iiiiiii aaaaaaa ttttttt
  Parsed "O R, I(R)" cdd {{t}} {i} {{a}}
  Stop
 
# Generate Controls for Doubleword Insertion (x-form)
00111010111 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" cdx {{t}} {{a}} {{b}}
  Stop
 
####Constant-Formation Instructions####
 
# Immediate Load Halfword
010000011 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" ilh {{t}} {i}
  Stop
 
# Immediate Load Halfword Upper
010000010 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" ilhu {{t}} {i}
  Stop
 
# Immediate Load Word
010000001 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" il {{t}} {i}
  Stop
 
# Immediate Load Address
0100001 iiiiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" ila {{t}} {i}
  Stop
 
# Immediate Or Halfword Lower
011000001 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" iohl {{t}} {i}
  Stop
 
# Form Select Mask for Bytes Immediate
001100101 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" fsmbi {{t}} {i}
  Stop
 
####Integer and Logical Instructions####
 
# Add Halfword
00011001000 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" ah {{t}} {{a}} {{b}}
  Stop
 
# Add Halfword Immediate
00011101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ahi {{t}} {{a}} {i}
  Stop
 
# Add Word
00011000000 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" a {{t}} {{a}} {{b}}
  Stop
 
# Add Word Immediate
00011100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ai {{t}} {{a}} {i}
  Stop
 
# Subtract from Halfword
00001001000 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" sfh {{t}} {{a}} {{b}}
  Stop
 
# Subtract from Halfword Immediate
00001101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" sfhi {{t}} {{a}} {i}
  Stop
 
# Subtract from Word
00001000000 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" sf {{t}} {{a}} {{b}}
  Stop
 
# Subtract from Word Immediate
00001100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" sfi {{t}} {{a}} {i}
  Stop
 
# Add Extended
01101000000 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" addx {{t}} {{a}} {{b}}
  Stop
 
# Carry Generate
00011000010 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" cg {{t}} {{a}} {{b}}
  Stop
 
# Carry Generate Extended
01101000010 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" cgx {{t}} {{a}} {{b}}
  Stop
 
# Subtract from Extended
01101000001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" sfx {{t}} {{a}} {{b}}
  Stop
 
# Borrow Generate
00001000010 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" bg {{t}} {{a}} {{b}}
  Stop
 
# Multiply
01111000100 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpy {{t}} {{a}} {{b}}
  Stop
 
# Multiply Unsigned
01111001100 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyu {{t}} {{a}} {{b}}
  Stop
 
# Multiply Immediate
01110100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" mpyi {{t}} {{a}} {i}
  Stop

# Multiply Unsigned Immediate
01110101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" mpyui {{t}} {{a}} {i}
  Stop

# Multiply and Add
1100 ttttttt bbbbbbb aaaaaaa ccccccc
  Parsed "O R, R, R, R" mpya {{t}} {{a}} {{b}} {{c}}
  Stop

# Multiply High
01111000101 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyh {{t}} {{a}} {{b}}
  Stop

# Multiply and Shift Right
01111000111 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpys {{t}} {{a}} {{b}}
  Stop

# Multiply High High
01111000110 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyhh {{t}} {{a}} {{b}}
  Stop

# Multiply High High and Add
01101000110 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyhha {{t}} {{a}} {{b}}
  Stop

# Multiply High High Unsigned
01111001110 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyhhu {{t}} {{a}} {{b}}
  Stop

# Multiply High High Unsigned and Add
01101001110 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" mpyhhau {{t}} {{a}} {{b}}
  Stop

# Count Leading Zeros
01010100101 ******* aaaaaaa ttttttt
  Parsed "O R, R" clz {{t}} {{a}}
  Stop

# Count Ones in Bytes
01010110100 ******* aaaaaaa ttttttt
  Parsed "O R, R" cntb {{t}} {{a}}
  Stop

# Form Select Mask for Bytes
00110110110 ******* aaaaaaa ttttttt
  Parsed "O R, R" fsmb {{t}} {{a}}
  Stop

# Form Select Mask for Halfwords
00110110101 ******* aaaaaaa ttttttt
  Parsed "O R, R" fsmh {{t}} {{a}}
  Stop

# Form Select Mask for Words
00110110100 ******* aaaaaaa ttttttt
  Parsed "O R, R" fsm {{t}} {{a}}
  Stop

# Gather Bits from Bytes
00110110010 ******* aaaaaaa ttttttt
  Parsed "O R, R" gbb {{t}} {{a}}
  Stop

# Gather Bits from Halfwords
00110110001 ******* aaaaaaa ttttttt
  Parsed "O R, R" gbh {{t}} {{a}}
  Stop

# Gather Bits from Words
00110110000 ******* aaaaaaa ttttttt
  Parsed "O R, R" gb {{t}} {{a}}
  Stop

# Average Bytes
00011010011 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" avgb {{t}} {{a}} {{b}}
  Stop

# Absolute Differences of Bytes
00001010011 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" absdb {{t}} {{a}} {{b}}
  Stop

# Sum Bytes into Halfwords
01001010011 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" sumb {{t}} {{a}} {{b}}
  Stop

# Extend Sign Byte to Halfword
01010110110 ******* aaaaaaa ttttttt
  Parsed "O R, R" xsbh {{t}} {{a}}
  Stop

# Extend Sign Halfword to Word
01010101110 ******* aaaaaaa ttttttt
  Parsed "O R, R" xshw {{t}} {{a}}
  Stop

# Extend Sign Word to Doubleword
01010100110 ******* aaaaaaa ttttttt
  Parsed "O R, R" xswd {{t}} {{a}}
  Stop

# And
00011000001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" and {{t}} {{a}} {{b}}
  Stop

# And with Complement
01011000001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" andc {{t}} {{a}} {{b}}
  Stop

# And Byte Immediate
00010110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" andbi {{t}} {{a}} {i}
  Stop

# And Halfword Immediate
00010101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" andhi {{t}} {{a}} {i}
  Stop

# And Word Immediate
00010100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" andi {{t}} {{a}} {i}
  Stop

# Or
00001000001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" or {{t}} {{a}} {{b}}
  Stop

# Or with Complement
01011001001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" orc {{t}} {{a}} {{b}}
  Stop

# Or Byte Immediate
00000110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" orbi {{t}} {{a}} {i}
  Stop

# Or Halfword Immediate
00000101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" orhi {{t}} {{a}} {i}
  Stop

# Or Word Immediate
00000100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ori {{t}} {{a}} {i}
  Stop

# Or Across
00111110000 ******* aaaaaaa ttttttt
  Parsed "O R, R" orx {{t}} {{a}}
  Stop

# Exclusive Or
01001000001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" xor {{t}} {{a}} {{b}}
  Stop

# Exclusive Or Byte Immediate
01000110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" xorbi {{t}} {{a}} {i}
  Stop

# Exclusive Or Halfword Immediate
01000101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" xorhi {{t}} {{a}} {i}
  Stop

# Exclusive Or Word Immediate
01000100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" xori {{t}} {{a}} {i}
  Stop

# Nand
00011001001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" nand {{t}} {{a}} {{b}}
  Stop

# Nor
00001001001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" nor {{t}} {{a}} {{b}}
  Stop

# Equivalent
01001001001 bbbbbbb aaaaaaa ttttttt
  Parsed "O R, R, R" eqv {{t}} {{a}} {{b}}
  Stop

# Select Bits
1000 ttttttt bbbbbbb aaaaaaa ccccccc
  Parsed "O R, R, R, R" selb {{t}} {{a}} {{b}} {{c}}
  Stop

# Shuffle Bytes
1011 ttttttt bbbbbbb aaaaaaa ccccccc
  Parsed "O R, R, R, R" shufb {{t}} {{a}} {{b}} {{c}}
  Stop

####Shift and Rotate Instructions####

# Shift Left Halfword
00001011111 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” shlh {{t}} {{a}} {{b}}
  Stop

# Shift Left Halfword Immediate
00001111111 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" shlhi {{t}} {{a}} {i}
  Stop

# Shift Left Word
00001011011 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” shl {{t}} {{a}} {{b}}
  Stop

# Shift Left Word Immediate
00001111011 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" shlhi {{t}} {{a}} {i}
  Stop

# Shift Left Quadword by Bits
00111011011 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” shlqbi {{t}} {{a}} {{b}}
  Stop

# Shift Left Quadword by Bits Immediate
00111111011 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" shlqbii {{t}} {{a}} {i}
  Stop

# Shift Left Quadword by Bytes
00111011111 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” shlqby {{t}} {{a}} {{b}}
  Stop

# Shift Left Quadword by Bytes Immediate
00111111111 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" shlqbyi {{t}} {{a}} {i}
  Stop

# Shift Left Quadword by Bytes from Bit Shift Count
00111001111 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” shlqbybi {{t}} {{a}} {{b}}
  Stop

# Rotate Halfword
00001011100 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” roth {{t}} {{a}} {{b}}
  Stop

# Rotate Halfword Immediate
00001111100 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rothi {{t}} {{a}} {i}
  Stop

# Rotate Word
00001011000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rot {{t}} {{a}} {{b}}
  Stop

# Rotate Word Immediate
00001111000 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" roti {{t}} {{a}} {i}
  Stop

# Rotate Quadword by Bytes
00111011100 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqby {{t}} {{a}} {{b}}
  Stop

# Rotate Quadword by Bytes Immediate
00111111100 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotqbyi {{t}} {{a}} {i}
  Stop

# Rotate Quadword by Bytes from Bit Shift Count
00111001100 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqbybi {{t}} {{a}} {{b}}
  Stop

# Rotate Quadword by Bits
00111011000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqbi {{t}} {{a}} {{b}}
  Stop

# Rotate Quadword by Bits Immediate
00111111000 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotqbii {{t}} {{a}} {i}
  Stop

# Rotate and Mask Halfword
00001011101 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rothm {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Halfword Immediate
00001111101 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rothmi {{t}} {{a}} {i}
  Stop

# Rotate and Mask Word
00001011001 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotm {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Word Immediate
00001111001 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotmi {{t}} {{a}} {i}
  Stop

# Rotate and Mask Quadword by Bytes
00111011101 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqmby {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Quadword by Bytes Immediate
00111111101 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotqmbyi {{t}} {{a}} {i}
  Stop

# Rotate and Mask Quadword Bytes from Bit Shift Count
00111001101 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqmbybi {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Quadword by Bits
00111011001 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotqmbi {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Quadword by Bits Immediate
00111111001 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotqmbii {{t}} {{a}} {i}
  Stop

# Rotate and Mask Algebraic Halfword
00001011110 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotmah {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Algebraic Halfword Immediate
00001111110 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotmahi {{t}} {{a}} {i}
  Stop

# Rotate and Mask Algebraic Word
00001011010 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” rotma {{t}} {{a}} {{b}}
  Stop

# Rotate and Mask Algebraic Word Immediate
00001111010 iiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" rotmai {{t}} {{a}} {i}
  Stop

####Compare Branch and Halt Instructions####

# Halt If Equal
01111011000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R” heq {{a}} {{b}}
  Stop

# Halt If Equal Immediate
01111111 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, I" heqi {{a}} {i}
  Stop

# Halt If Greater Than
01001011000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R” hgt {{a}} {{b}}
  Stop

# Halt If Greater Than Immediate
01001111 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, I" hgti {{a}} {i}
  Stop

# Halt If Logically Greater Than
01011011000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R” hlgt {{a}} {{b}}
  Stop

# Halt If Logically Greater Than Immediate
01011111 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, I" hlgti {{a}} {i}
  Stop

# Compare Equal Byte
01111010000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” ceqb {{t}} {{a}} {{b}}
  Stop

# Compare Equal Byte Immediate
01111110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ceqbi {{t}} {{a}} {i}
  Stop

# Compare Equal Halfword
01111001000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” ceqh {{t}} {{a}} {{b}}
  Stop

# Compare Equal Halfword Immediate
01111101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ceqhi {{t}} {{a}} {i}
  Stop

# Compare Equal Word
01111000000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” ceq {{t}} {{a}} {{b}}
  Stop

# Compare Equal Word Immediate
01111100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" ceqi {{t}} {{a}} {i}
  Stop

# Compare Greater Than Byte
01001010000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” cgtb {{t}} {{a}} {{b}}
  Stop

# Compare Greater Than Byte Immediate
01001110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" cgtbi {{t}} {{a}} {i}
  Stop

# Compare Greater Than Halfword
01001001000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” cgth {{t}} {{a}} {{b}}
  Stop

# Compare Greater Than Halfword Immediate
01001101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" cgthi {{t}} {{a}} {i}
  Stop

# Compare Greater Than Word
01001000000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” cgt {{t}} {{a}} {{b}}
  Stop

# Compare Greater Than Word Immediate
01001100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" cgti {{t}} {{a}} {i}
  Stop

# Compare Logical Greater Than Byte
01011010000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” clgtb {{t}} {{a}} {{b}}
  Stop

# Compare Logical Greater Than Byte Immediate
01011110 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" clgtbi {{t}} {{a}} {i}
  Stop

# Compare Logical Greater Than Halfword
01011001000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” clgth {{t}} {{a}} {{b}}
  Stop

# Compare Logical Greater Than Halfword Immediate
01011101 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" clgt {{t}} {{a}} {i}
  Stop

# Compare Logical Greater Than Word
01011000000 bbbbbbb aaaaaaa ttttttt 
  Parsed “O R, R, R” clgth {{t}} {{a}} {{b}}
  Stop

# Compare Logical Greater Than Word Immediate
01011100 iiiiiiiiii aaaaaaa ttttttt
  Parsed "O R, R, I" clgti {{t}} {{a}} {i}
  Stop

# Branch Relative
001100100 iiiiiiiiiiiiiiii *******
  Parsed "O I" br {i}
  Stop

# Branch Absolute
001100000 iiiiiiiiiiiiiiii *******
  Parsed "O I" bra {i}
  Stop

# Branch Relative and Set Link
001100110 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brsl {{t}} {i}
  Stop

# Branch Absolute and Set Link
001100010 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brasl {{t}} {i}
  Stop

# Branch Indirect
00110101000*DE**** aaaaaaa *******
  Parsed "O R" bi {{a}}
  Stop

# Interrupt Return
00110101010*DE**** aaaaaaa *******
  Parsed "O R" iret {{a}}
  Stop

# Branch Indirect and Set Link if External Data
00110101011*DE**** aaaaaaa ttttttt
  Parsed "O R, R" bisled {{t}} {{a}}
  Stop

# Branch Indirect and Set Link
00110101001*DE**** aaaaaaa ttttttt
  Parsed "O R, R" bisl {{t}} {{a}}
  Stop

# Branch If Not Zero Word
001000010 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brnz {{t}} {i}
  Stop

# Branch If Zero Word
001000000 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brz {{t}} {i}
  Stop

# Branch If Not Zero Halfword
001000110 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brhnz {{t}} {i}
  Stop

# Branch If Zero Halfword
001000100 iiiiiiiiiiiiiiii ttttttt
  Parsed "O R, I" brhz {{t}} {i}
  Stop

# Branch Indirect If Zero
00100101000*DE**** aaaaaaa ttttttt
  Parsed "O R, R" biz {{t}} {{a}}
  Stop

# Branch Indirect If Not Zero
00100101001*DE**** aaaaaaa ttttttt
  Parsed "O R, R" binz {{t}} {{a}}
  Stop

# Branch Indirect If Zero Halfword
00100101010*DE**** aaaaaaa ttttttt
  Parsed "O R, R" bihz {{t}} {{a}}
  Stop

# Branch Indirect If Not Zero Halfword
00100101011*DE**** aaaaaaa ttttttt
  Parsed "O R, R" bihnz {{t}} {{a}}
  Stop

####Hint-for-Branch Instructions####